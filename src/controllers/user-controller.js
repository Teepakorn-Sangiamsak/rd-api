const path = require("path");
const fs = require("fs/promises");
const prisma = require("../config/prisma");
const createError = require("../utils/createError");
const { cloudinary } = require("../config/cloudinary");
const bcrypt = require("bcryptjs"); // ‡πÄ‡∏û‡∏¥‡πà‡∏° import bcrypt

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
exports.updateProfile = async (req, res, next) => {
  try {
    const { firstname, lastname } = req.body;
    const userId = req.user.id;
    let profileImageUrl = req.user.profileImage;

    console.log(" ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ req.file:", req.file);

    if (req.file) {
      try {
        const uploadResult = await cloudinary.uploader.upload(req.file.path, {
          folder: "profile_images",
          public_id: path.parse(req.file.path).name,
          overwrite: true,
          use_filename: true,
        });

        console.log("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", uploadResult);
        profileImageUrl = uploadResult.secure_url;

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
        await fs.unlink(req.file.path);
      } catch (uploadError) {
        console.error(
          "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:",
          uploadError.message
        );
        return next(createError(500, "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"));
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const updatedUser = await prisma.user.update({
      where: { id: userId },
      data: {
        firstname,
        lastname,
        profileImage: profileImageUrl,
      },
      select: {
        id: true,
        username: true,
        firstname: true,
        lastname: true,
        email: true,
        profileImage: true,
      },
    });

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user: updatedUser });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.message);
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"));
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
exports.updatePassword = async (req, res, next) => {
  try {
    const { oldPassword, newPassword, confirmPassword } = req.body;

    if (!oldPassword || !newPassword || !confirmPassword) {
      return next(createError(400, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"));
    }
    if (newPassword !== confirmPassword) {
      return next(createError(400, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"));
    }

    const user = await prisma.user.findUnique({ where: { id: req.user.id } });
    if (!user) {
      return next(createError(404, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"));
    }

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return next(createError(400, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"));
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await prisma.user.update({
      where: { id: req.user.id },
      data: { password: hashedPassword },
    });

    res.json({ message: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"));
  }
};

// ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
exports.deleteAccount = async (req, res, next) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.id } });
    if (!user) {
      return next(createError(404, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"));
    }

    await prisma.user.delete({ where: { id: req.user.id } });

    res.json({ message: "‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"));
  }
};

exports.submitProof = async (req, res, next) => {
  try {
    const { challengeId } = req.params;
    const userId = req.user.id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÜ
    if (!req.files || req.files.length === 0) {
      return res
        .status(400)
        .json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
    const imageUrls = [];
    for (const file of req.files) {
      try {
        const result = await cloudinary.uploader.upload(file.path, {
          folder: "challenge_proofs",
        });
        imageUrls.push(result.secure_url);
        
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        await fs.unlink(file.path);
      } catch (error) {
        console.error("Error uploading to Cloudinary:", error);
      }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Database (user_proof)
    const proof = await prisma.user_Proof.create({
      data: {
        userId: userId,
        challengeId: parseInt(challengeId),
        proofImages: JSON.stringify(imageUrls), // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON string
        status: "PENDING",
      },
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Database (admin_proof_check)
    await prisma.admin_Proof_Check.create({
      data: {
        proofId: proof.id,
        status: "PENDING",
      },
    });

    res.json({
      message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Proof ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      proof,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

// ‡πÉ‡∏ä‡πâ export ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô module.exports = {...}
exports.updateExpOnChallengeSuccess = async (userId, expReward) => {
  const user = await prisma.user.findUnique({
    where: { id: userId },
    select: { exp: true, level: true },
  });

  if (!user) throw new Error("User not found");

  let totalExp = user.exp + expReward;
  let level = user.level;

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πÄ‡∏ß‡∏• 1 ‡πÉ‡∏ä‡πâ 1000 EXP
  let expToNextLevel = Math.floor(1000 * Math.pow(1.2, level - 1));
  let currentExp = totalExp; // üõ† ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ EXP ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏•‡∏≠‡∏î

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ EXP ‡πÄ‡∏Å‡∏¥‡∏ô‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ
  while (currentExp >= expToNextLevel) {
    currentExp -= expToNextLevel;
    level += 1;
    expToNextLevel = Math.floor(1000 * Math.pow(1.2, level - 1)); // üî• ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  await prisma.user.update({
    where: { id: userId },
    data: {
      exp: currentExp, // üõ† ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      level: level,
    },
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Badge ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ
  if (level > user.level) {
    await checkAndCreateBadge(userId, 'EXP', level);
  }

  // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ EXP ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô, EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
  return {
    currentExp: currentExp,
    expToNextLevel: expToNextLevel,
    level: level,
  };
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Badge
const checkAndCreateBadge = async (userId, condition, value) => {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Badge ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    let badges = [];
    
    if (condition === 'EXP') {
      // ‡∏´‡∏≤ Badge ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      badges = await prisma.badge.findMany({
        where: {
          condition: 'EXP',
          // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ä‡πà‡∏ô requiredLevel
          // WHERE requiredLevel <= value
        }
      });
    } else if (condition === 'CHALLENGE_COMPLETED') {
      // ‡∏´‡∏≤ Badge ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ä‡∏≤‡πÄ‡∏•‡∏ô‡∏à‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      badges = await prisma.badge.findMany({
        where: {
          condition: 'CHALLENGE_COMPLETED',
        }
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Badge ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    for (const badge of badges) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ Badge ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingBadge = await prisma.user_Badge.findFirst({
        where: {
          userId,
          badgeId: badge.id
        }
      });
      
      if (!existingBadge) {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Badge ‡πÉ‡∏´‡∏°‡πà
        await prisma.user_Badge.create({
          data: {
            userId,
            badgeId: badge.id
          }
        });
      }
    }
  } catch (error) {
    console.error("Error creating badge:", error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profile ‡πÅ‡∏•‡∏∞ EXP ‡∏Ç‡∏≠‡∏á User
exports.getUserProfile = async (req, res, next) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user.id },
      select: { 
        id: true,
        username: true, 
        firstname: true,
        lastname: true,
        email: true,
        profileImage: true,
        level: true, 
        exp: true,
        createdAt: true,
        userBadges: {
          select: {
            badge: {
              select: {
                id: true,
                name: true,
                description: true
              }
            },
            earnedAt: true
          }
        }
      },
    });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ
    const expToNextLevel = Math.floor(1000 * Math.pow(1.2, user.level - 1));
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Challenge ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    const completedChallenges = await prisma.user_Challenge.count({
      where: {
        userId: req.user.id,
        status: "COMPLETED"
      }
    });

    res.json({ 
      message: "User profile fetched successfully", 
      user: {
        ...user,
        expToNextLevel,
        completedChallenges
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server Error" });
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ä‡∏≤‡πÄ‡∏•‡∏ô‡∏à‡πå
exports.getUserChallengeHistory = async (req, res, next) => {
  try {
    const history = await prisma.user_Challenge.findMany({
      where: { userId: req.user.id },
      include: {
        challenge: {
          select: {
            id: true,
            name: true,
            description: true,
            expReward: true
          }
        }
      },
      orderBy: { submittedAt: 'desc' }
    });
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const grouped = {
      completed: history.filter(c => c.status === 'COMPLETED'),
      inProgress: history.filter(c => c.status === 'IN_PROGRESS'),
      pending: history.filter(c => c.status === 'PENDING')
    };
    
    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const stats = {
      total: history.length,
      completed: grouped.completed.length,
      inProgress: grouped.inProgress.length,
      pending: grouped.pending.length,
      completionRate: history.length > 0 
        ? (grouped.completed.length / history.length * 100).toFixed(2) + '%' 
        : '0%',
      totalExpEarned: grouped.completed.reduce((sum, c) => sum + c.challenge.expReward, 0)
    };

    res.json({
      message: "Challenge history fetched successfully",
      history: grouped,
      stats
    });
  } catch (error) {
    console.error(error);
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ä‡∏≤‡πÄ‡∏•‡∏ô‡∏à‡πå"));
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Badge ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
exports.getUserBadges = async (req, res, next) => {
  try {
    const userBadges = await prisma.user_Badge.findMany({
      where: { userId: req.user.id },
      include: {
        badge: true
      },
      orderBy: { earnedAt: 'desc' }
    });
    
    res.json({
      message: "User badges fetched successfully",
      badges: userBadges
    });
  } catch (error) {
    console.error(error);
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Badge ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"));
  }
};