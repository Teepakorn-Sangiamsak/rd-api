const prisma = require("../config/prisma");
const createError = require("../utils/createError");

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Challenge
exports.createChallenge = async (req, res, next) => {
  try {
    const { name, description, expReward, status, requirementType } = req.body;
    const userId = req.user.id;

    console.log("‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", req.body);  // üõ†Ô∏è Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    console.log("User ID:", userId);       // üõ†Ô∏è Debug: ‡∏î‡∏π userId ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤

    if (!name || !description) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const newChallenge = await prisma.challenge.create({
      data: {
        name,
        description,
        expReward: parseInt(expReward) || 100,  // üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Int
        status: status || "PRIVATE",
        requirementType,
        createdBy: userId,
      },
    });

    res.status(201).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á Challenge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", challenge: newChallenge });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Challenge:", error);  // üõ†Ô∏è Debug: ‡∏î‡∏π Error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    next(error);  // ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  }
};



// ‡∏î‡∏π Challenge ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getChallenges = async (req, res, next) => {
  try {
    const challenges = await prisma.challenge.findMany({
      where: { status: "PUBLIC" }, // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Public
      include: {
        creator: { select: { username: true } }, // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
      },
    });

    res.json({ challenges });
  } catch (error) {
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Challenge"));
  }
};

// User ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Challenge
exports.joinChallenge = async (req, res, next) => {
  try {
    const { challengeId } = req.params;
    const userId = req.user.id;

    const challenge = await prisma.challenge.findUnique({
      where: { id: parseInt(challengeId) },
    });
    if (!challenge) {
      return createError(404, "‡πÑ‡∏°‡πà‡∏û‡∏ö Challenge");
    }

    await prisma.user_Challenge.create({
      data: {
        userId,
        challengeId: parseInt(challengeId),
        status: "IN_PROGRESS",
      },
    });

    res.json({ message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Challenge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Challenge"));
  }
};

// User ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô Challenge
exports.submitChallengeProof = async (req, res, next) => {
  try {
    const { challengeId } = req.params;
    const { userId } = req.user;
    const files = req.files; // ‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ

    if (!files || files.length === 0) {
      return res
        .status(400)
        .json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö URL
    const imageUrls = [];
    for (let file of files) {
      const result = await cloudinary.uploader.upload(file.path, {
        folder: "proof_images",
      });
      imageUrls.push(result.secure_url);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Proof ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const proof = await prisma.user_Proof.create({
      data: {
        userId: req.user.id, 
        challengeId: parseInt(challengeId),
        proofImages: proofImages, 
        status: "PENDING",
        submittedAt: new Date(),
      },
    });

    res.json({ message: "‡∏™‡πà‡∏á Proof ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", proof });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ message: "Server Error" });
  }
};

// Admin ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô
exports.verifyProof = async (req, res, next) => {
  try {
    if (req.user.role !== "ADMIN")
      return next(createError(403, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"));

    const { proofId, status } = req.body;
    if (!["APPROVED", "REJECTED"].includes(status)) {
      return next(createError(400, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"));
    }

    const proof = await prisma.user_Proof.update({
      where: { id: parseInt(proofId) },
      data: { status },
    });

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", proof });
  } catch (error) {
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô"));
  }
};

// Admin & User ‡∏•‡∏ö Challenge (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
exports.deleteChallenge = async (req, res, next) => {
  try {
    const { challengeId } = req.params;
    const userId = req.user.id;

    const challenge = await prisma.challenge.findUnique({
      where: { id: parseInt(challengeId) },
    });
    if (!challenge) return next(createError(404, "‡πÑ‡∏°‡πà‡∏û‡∏ö Challenge"));

    if (req.user.role !== "ADMIN" && challenge.createdBy !== userId) {
      return next(createError(403, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö Challenge ‡∏ô‡∏µ‡πâ"));
    }

    await prisma.challenge.delete({ where: { id: parseInt(challengeId) } });

    res.json({ message: "‡∏•‡∏ö Challenge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    next(createError(500, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Challenge"));
  }
};
